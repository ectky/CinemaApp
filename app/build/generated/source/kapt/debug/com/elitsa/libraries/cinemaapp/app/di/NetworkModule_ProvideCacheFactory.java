// Generated by Dagger (https://dagger.dev).
package com.elitsa.libraries.cinemaapp.app.di;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.io.File;
import javax.inject.Provider;
import okhttp3.Cache;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideCacheFactory implements Factory<Cache> {
  private final NetworkModule module;

  private final Provider<File> cacheFileProvider;

  public NetworkModule_ProvideCacheFactory(NetworkModule module, Provider<File> cacheFileProvider) {
    this.module = module;
    this.cacheFileProvider = cacheFileProvider;
  }

  @Override
  public Cache get() {
    return provideCache(module, cacheFileProvider.get());
  }

  public static NetworkModule_ProvideCacheFactory create(NetworkModule module,
      Provider<File> cacheFileProvider) {
    return new NetworkModule_ProvideCacheFactory(module, cacheFileProvider);
  }

  public static Cache provideCache(NetworkModule instance, File cacheFile) {
    return Preconditions.checkNotNull(instance.provideCache(cacheFile), "Cannot return null from a non-@Nullable @Provides method");
  }
}
